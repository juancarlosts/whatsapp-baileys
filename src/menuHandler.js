// src/menuHandler.js
// Sistema de men√∫s interactivos para WhatsApp

// Almacena el estado de cada conversaci√≥n (en memoria)
const conversationStates = new Map();

// Tiempo de espera para el men√∫ (en milisegundos)
const MENU_TIMEOUT = 60000; // 1 minuto

// Definici√≥n de men√∫s
const MENUS = {
    MAIN: {
        id: 'MAIN',
        title: 'ü§ñ *Men√∫ Principal*',
        message: 'Por favor, selecciona una opci√≥n:\n\n1Ô∏è‚É£ Soporte\n2Ô∏è‚É£ Productos\n3Ô∏è‚É£ Facturas\n\n_Escribe el n√∫mero de tu opci√≥n_',
        options: {
            '1': { action: 'SOPORTE', nextMenu: 'SOPORTE' },
            '2': { action: 'PRODUCTOS', nextMenu: 'PRODUCTOS' },
            '3': { action: 'FACTURAS', nextMenu: 'FACTURAS' },
        },
        timeout: true
    },
    
    SOPORTE: {
        id: 'SOPORTE',
        title: 'üÜò *Soporte T√©cnico*',
        message: '¬øEn qu√© podemos ayudarte?\n\n1Ô∏è‚É£ Problema t√©cnico\n2Ô∏è‚É£ Consulta general\n3Ô∏è‚É£ Hablar con un agente\n0Ô∏è‚É£ Volver al men√∫ principal\n\n_Escribe el n√∫mero de tu opci√≥n_',
        options: {
            '1': { action: 'PROBLEMA_TECNICO', response: 'üîß Por favor, describe tu problema t√©cnico y un agente te contactar√° pronto.' },
            '2': { action: 'CONSULTA_GENERAL', response: 'üí¨ Por favor, escribe tu consulta y te responderemos a la brevedad.' },
            '3': { action: 'AGENTE', response: 'üë§ Un agente humano te contactar√° en breve. Tiempo estimado: 5 minutos.' },
            '0': { action: 'BACK', nextMenu: 'MAIN' },
        },
        timeout: true
    },
    
    PRODUCTOS: {
        id: 'PRODUCTOS',
        title: 'üõçÔ∏è *Cat√°logo de Productos*',
        message: '¬øQu√© te interesa?\n\n1Ô∏è‚É£ Ver cat√°logo completo\n2Ô∏è‚É£ Productos en oferta\n3Ô∏è‚É£ Nuevos productos\n0Ô∏è‚É£ Volver al men√∫ principal\n\n_Escribe el n√∫mero de tu opci√≥n_',
        options: {
            '1': { action: 'CATALOGO', response: 'üìã Aqu√≠ est√° nuestro cat√°logo: https://ejemplo.com/catalogo' },
            '2': { action: 'OFERTAS', response: 'üî• ¬°Ofertas especiales! https://ejemplo.com/ofertas' },
            '3': { action: 'NUEVOS', response: '‚ú® Productos nuevos: https://ejemplo.com/nuevos' },
            '0': { action: 'BACK', nextMenu: 'MAIN' },
        },
        timeout: true
    },
    
    FACTURAS: {
        id: 'FACTURAS',
        title: 'üìÑ *Facturas*',
        message: '¬øQu√© necesitas?\n\n1Ô∏è‚É£ Consultar factura\n2Ô∏è‚É£ Solicitar factura\n3Ô∏è‚É£ Reportar problema con factura\n0Ô∏è‚É£ Volver al men√∫ principal\n\n_Escribe el n√∫mero de tu opci√≥n_',
        options: {
            '1': { action: 'CONSULTAR_FACTURA', response: 'üîç Por favor, env√≠a el n√∫mero de tu factura.' },
            '2': { action: 'SOLICITAR_FACTURA', response: 'üì® Por favor, env√≠a tu RFC y n√∫mero de pedido.' },
            '3': { action: 'PROBLEMA_FACTURA', response: '‚ö†Ô∏è Describe el problema con tu factura y te ayudaremos.' },
            '0': { action: 'BACK', nextMenu: 'MAIN' },
        },
        timeout: true
    },
    
    CLIENTE: {
        id: 'CLIENTE',
        title: 'üë§ *Bienvenido*',
        message: '¬øEres cliente?\n\n1Ô∏è‚É£ S√≠, soy cliente\n2Ô∏è‚É£ No, quiero informaci√≥n\n\n_Escribe el n√∫mero de tu opci√≥n_',
        options: {
            '1': { action: 'ES_CLIENTE', nextMenu: 'MAIN', response: '‚úÖ ¬°Bienvenido de nuevo!' },
            '2': { action: 'NO_CLIENTE', response: 'üëã ¬°Bienvenido! Te mostraremos nuestra informaci√≥n:\n\nWeb: https://ejemplo.com\nTel√©fono: +123456789\nEmail: info@ejemplo.com' },
        },
        timeout: true
    }
};

// Obtener o crear estado de conversaci√≥n
function getConversationState(userId) {
    if (!conversationStates.has(userId)) {
        conversationStates.set(userId, {
            currentMenu: null,
            lastInteraction: Date.now(),
            data: {}
        });
    }
    return conversationStates.get(userId);
}

// Limpiar estado de conversaci√≥n
function clearConversationState(userId) {
    conversationStates.delete(userId);
}

// Iniciar men√∫
function startMenu(userId, menuId = 'CLIENTE') {
    const state = getConversationState(userId);
    state.currentMenu = menuId;
    state.lastInteraction = Date.now();
    
    const menu = MENUS[menuId];
    if (!menu) return null;
    
    // Configurar timeout si est√° habilitado
    if (menu.timeout) {
        setTimeout(() => {
            checkTimeout(userId);
        }, MENU_TIMEOUT);
    }
    
    return formatMenuMessage(menu);
}

// Formatear mensaje del men√∫
function formatMenuMessage(menu) {
    return `${menu.title}\n\n${menu.message}`;
}

// Procesar respuesta del usuario
function processUserResponse(userId, message) {
    const state = getConversationState(userId);
    
    // Si no hay men√∫ activo y el usuario escribe "menu" o "men√∫"
    const normalizedMessage = message.toLowerCase().trim();
    if (!state.currentMenu || normalizedMessage === 'menu' || normalizedMessage === 'men√∫') {
        return startMenu(userId, 'MAIN');
    }
    
    // Verificar timeout
    if (Date.now() - state.lastInteraction > MENU_TIMEOUT) {
        clearConversationState(userId);
        return '‚è±Ô∏è Tu tiempo para seleccionar una opci√≥n ha concluido.\n\nPor favor escribe la palabra *Men√∫* para regresar al Men√∫ Principal.';
    }
    
    // Obtener men√∫ actual
    const currentMenu = MENUS[state.currentMenu];
    if (!currentMenu) {
        return startMenu(userId, 'MAIN');
    }
    
    // Buscar opci√≥n seleccionada
    const option = currentMenu.options[message.trim()];
    
    if (!option) {
        return `‚ùå Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n del men√∫:\n\n${formatMenuMessage(currentMenu)}`;
    }
    
    // Actualizar √∫ltima interacci√≥n
    state.lastInteraction = Date.now();
    
    // Procesar acci√≥n
    let response = '';
    
    // Si tiene respuesta directa
    if (option.response) {
        response = option.response;
    }
    
    // Si tiene siguiente men√∫
    if (option.nextMenu) {
        state.currentMenu = option.nextMenu;
        const nextMenu = MENUS[option.nextMenu];
        if (nextMenu) {
            response += (response ? '\n\n' : '') + formatMenuMessage(nextMenu);
        }
    } else {
        // Si no hay siguiente men√∫, limpiar estado
        clearConversationState(userId);
    }
    
    return response;
}

// Verificar timeout
function checkTimeout(userId) {
    const state = conversationStates.get(userId);
    if (state && Date.now() - state.lastInteraction > MENU_TIMEOUT) {
        clearConversationState(userId);
    }
}

// Verificar si un usuario est√° en un men√∫ activo
function isInActiveMenu(userId) {
    const state = conversationStates.get(userId);
    if (!state || !state.currentMenu) return false;
    
    // Verificar si el men√∫ est√° expirado
    if (Date.now() - state.lastInteraction > MENU_TIMEOUT) {
        clearConversationState(userId);
        return false;
    }
    
    return true;
}

// Obtener men√∫ actual del usuario
function getCurrentMenu(userId) {
    const state = conversationStates.get(userId);
    if (!state || !state.currentMenu) return null;
    return MENUS[state.currentMenu];
}

// Exportar funciones
module.exports = {
    startMenu,
    processUserResponse,
    isInActiveMenu,
    getCurrentMenu,
    clearConversationState,
    MENUS
};
